# Generated by Django 4.0.4 on 2022-04-26 03:27

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extras', '0073_journalentry_tags_custom_fields'),
        ('dcim', '0153_created_datetimefield'),
        ('virtualization', '0029_created_datetimefield'),
        ('ipam', '0057_created_datetimefield'),
    ]

    operations = [
        migrations.CreateModel(
            name='NASCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('devices', models.ManyToManyField(blank=True, related_name='devices', to='dcim.device')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='extras.TaggedItem', to='extras.Tag', verbose_name='Tags')),
                ('access_ips', models.ManyToManyField(blank=True, related_name='nas_cluster_access_ips', to='ipam.ipaddress')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='NASVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('size_gb', models.PositiveIntegerField()),
                ('local_directory', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('nas_cluster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='volumes', to='netbox_nas.nascluster')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='extras.TaggedItem', to='extras.Tag', verbose_name='Tags')),
                ('base_unix_permissions', models.CharField(default='2770', max_length=100)),
                ('security_style', models.CharField(default='unix', max_length=30)),
                ('group', models.CharField(max_length=100)),
                ('owner', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('export_id', models.PositiveIntegerField(blank=True)),
            ],
            options={
                'ordering': ('nas_cluster', 'local_directory'),
                'unique_together': {('nas_cluster', 'local_directory'), ('nas_cluster', 'export_id')},
            },
        ),
        migrations.CreateModel(
            name='NASShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=50)),
                ('type', models.CharField(max_length=30)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('nas_volume', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='shares', to='netbox_nas.nasvolume')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='extras.TaggedItem', to='extras.Tag', verbose_name='Tags')),
                ('mount_options', models.CharField(blank=True, max_length=100)),
                ('volume_subdirectory', models.CharField(default='/', max_length=200)),
                ('access_level', models.CharField(default='rw', max_length=30)),
                ('access_prefixes', models.ManyToManyField(blank=True, related_name='nas_share_access_prefixes', to='ipam.prefix')),
                ('access_ips', models.ManyToManyField(blank=True, related_name='nas_share_access_ips', to='ipam.ipaddress')),
            ],
            options={
                'ordering': ('nas_volume', 'name'),
                'unique_together': {('nas_volume', 'name')},
            },
        ),
        migrations.CreateModel(
            name='NASMount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('local_directory', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('devices', models.ManyToManyField(blank=True, related_name='nas_mount_devices', to='dcim.device')),
                ('nas_share', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mounts', to='netbox_nas.nasshare')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='extras.TaggedItem', to='extras.Tag', verbose_name='Tags')),
                ('virtual_machines', models.ManyToManyField(blank=True, related_name='nas_mount_virtual_machines', to='virtualization.virtualmachine')),
                ('mount_options', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ('nas_share', 'local_directory'),
                'unique_together': {('nas_share', 'local_directory')},
            },
        ),
    ]
